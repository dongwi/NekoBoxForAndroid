// Code generated by gobind. DO NOT EDIT.

// Java class libcore.Libcore is a proxy for talking to a Go program.
//
//   autogenerated by gobind -lang=java libcore
package libcore;

import go.Seq;

public abstract class Libcore {
	static {
		Seq.touch(); // for loading the native library
		_init();
	}
	
	private Libcore() {} // uninstantiable
	
	// touch is called from other bound packages to initialize this package
	public static void touch() {}
	
	private static native void _init();
	
	private static final class proxyBoxPlatformInterface implements Seq.Proxy, BoxPlatformInterface {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyBoxPlatformInterface(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void autoDetectInterfaceControl(int fd) throws Exception;
		public native int findConnectionOwner(int ipProtocol, String sourceAddress, int sourcePort, String destinationAddress, int destinationPort) throws Exception;
		public native long openTun(String singTunOptionsJson, String tunPlatformOptionsJson) throws Exception;
		public native String packageNameByUid(int uid) throws Exception;
		public native int uidByPackageName(String packageName) throws Exception;
		public native boolean useProcFS();
		public native String wifiState();
	}
	private static final class proxyFunc implements Seq.Proxy, Func {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyFunc(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void invoke() throws Exception;
	}
	private static final class proxyHTTPClient implements Seq.Proxy, HTTPClient {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyHTTPClient(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void close();
		public native void keepAlive();
		public native void modernTLS();
		public native HTTPRequest newRequest();
		public native void pinnedSHA256(String sumHex);
		public native void pinnedTLS12();
		public native void restrictedTLS();
		public native void trySocks5(int port);
	}
	private static final class proxyHTTPRequest implements Seq.Proxy, HTTPRequest {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyHTTPRequest(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void allowInsecure();
		public native HTTPResponse execute() throws Exception;
		public native void setContent(byte[] content);
		public native void setContentString(String content);
		public native void setHeader(String key, String value);
		public native void setMethod(String method);
		public native void setURL(String link) throws Exception;
		public native void setUserAgent(String userAgent);
	}
	private static final class proxyHTTPResponse implements Seq.Proxy, HTTPResponse {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyHTTPResponse(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native byte[] getContent() throws Exception;
		public native String getContentString() throws Exception;
		public native String getHeader(String p0);
		public native void writeTo(String path) throws Exception;
	}
	private static final class proxyLocalDNSTransport implements Seq.Proxy, LocalDNSTransport {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyLocalDNSTransport(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void exchange(ExchangeContext ctx, byte[] message) throws Exception;
		public native void lookup(ExchangeContext ctx, String network, String domain) throws Exception;
		public native boolean raw();
	}
	private static final class proxyNB4AInterface implements Seq.Proxy, NB4AInterface {
		private final int refnum;
		
		@Override public final int incRefnum() {
		      Seq.incGoRef(refnum, this);
		      return refnum;
		}
		
		proxyNB4AInterface(int refnum) { this.refnum = refnum; Seq.trackGoRef(refnum, this); }
		
		public native void selector_OnProxySelected(String selectorTag, String tag);
		public native boolean useOfficialAssets();
	}
	
	
	public static native void forceGc();
	public static native void initCore(String process, String cachePath, String internalAssets, String externalAssets, int maxLogSizeKb, boolean logEnable, NB4AInterface if1, BoxPlatformInterface if2);
	public static native void nekoLogClear();
	public static native void nekoLogPrintln(String s);
	public static native HTTPClient newHttpClient();
	public static native BoxInstance newSingBoxInstance(String config) throws Exception;
	public static native void registerLocalDNSTransport(LocalDNSTransport transport);
	public static native void resetAllConnections(boolean system);
	public static native byte[] sha1(byte[] data);
	public static native String sha256Hex(byte[] data);
	public static native StunResult stunTest(String server);
	public static native void unxz(String archive, String path) throws Exception;
	public static native void unzip(String archive, String path) throws Exception;
	public static native int urlTest(BoxInstance i, String link, int timeout) throws Exception;
	public static native String versionBox();
}
